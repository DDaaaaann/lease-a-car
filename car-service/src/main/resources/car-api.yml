openapi: 3.0.3
info:
  title: Lease a car API 1.0.0
  description: |-
    This is a lease a car api for car data, as an assignment for SVB.
  version: 1.0.0
tags:
  - name: car
    description: Everything about cars
paths:
  /cars:
    get:
      tags:
        - cars
      summary: Get all cars
      description: Find all registered cars
      operationId: getCars
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '404':
          description: Cars not found
        '422':
          description: Validation exception
          # security:
          # - petstore_auth:
          # - write:pets
          # - read:pets
    post:
      tags:
        - car
      summary: Add a new car
      description: Register a new car by adding it
      operationId: addCar
      requestBody:
        description: Create a new car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
          # security:
          # - petstore_auth:
          # - write:pets
          # - read:pets
  /cars/{id}:
    get:
      tags:
        - car
      summary: Get car by id
      description: Get car by its id
      operationId: getCarById
      parameters:
        - name: id
          in: path
          description: The id of the car to get
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid id supplied
        '404':
          description: Customer not found
    put:
      tags:
        - car
      summary: Update car
      description: Update an existing car
      operationId: updateCar
      parameters:
        - name: id
          in: path
          description: The id of the car to uodate
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent car
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - car
      summary: Delete car
      description: Delete an existing car
      operationId: deleteCar
      parameters:
        - name: id
          in: path
          description: The id of the car to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Customer not found
components:
  schemas:
    Car:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        make:
          type: string
          example: Lexus
        model:
          type: string
          example: IS220d
        version:
          type: string
          example: Sport
        numberOfDoors:
          type: integer
          example: 4
        co2Emission:
          type: integer
          example: 150
        grossPrice:
          type: number
          format: double
          example: 44285
        nettPrice:
          type: number
          format: double
          example: 28488,66
      xml:
        name: customer
    # securitySchemes:
#    customer_auth:
#      type: oauth2
#      flows:
#        implicit:
#          authorizationUrl:
#          scopes:
#            write:customers: modify customers
#            read:customers: read your customers
#    api_key:
#      type: apiKey
#      name: api_key
#      in: header