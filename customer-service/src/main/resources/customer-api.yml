openapi: 3.0.3
info:
  title: Lease a car API 1.0.0
  description: |-
    This is a lease a car api, as an assignment for SVB.
  version: 1.0.0
tags:
  - name: customer
    description: Everything about customers
paths:
  /customers:
    get:
      tags:
        - customer
      summary: Get all customers
      description: Find all registered customers
      operationId: getCustomers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '404':
          description: Customers not found
        '422':
          description: Validation exception
          # security:
          # - petstore_auth:
          # - write:pets
          # - read:pets
    post:
      tags:
        - customer
      summary: Add a new cutomer
      description: Register a new customer by adding it
      operationId: addCustomer
      requestBody:
        description: Create a new customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
          # security:
          # - petstore_auth:
          # - write:pets
          # - read:pets
  /customers/{id}:
    get:
      tags:
        - customer
      summary: Get customer by id
      description: Get customer by its id
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          description: The id of the customer to get
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid id supplied
        '404':
          description: Customer not found
    put:
      tags:
        - customer
      summary: Update customer
      description: Update an existing cutomer
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          description: The id of the customer to uodate
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - customer
      summary: Delete customer
      description: Delete an existing customer
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          description: The id of the customer to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Customer not found
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        name:
          type: string
          example: fehguy
        email:
          type: string
          format: email
          example: johndoe@mail.com
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: Dorpsstraat
        houseNumber:
          type: string
          example: 123
        place:
          type: string
          example: Delft
        zipCode:
          type: string
          example: 1234AB
      xml:
        name: address
    # securitySchemes:
#    customer_auth:
#      type: oauth2
#      flows:
#        implicit:
#          authorizationUrl:
#          scopes:
#            write:customers: modify customers
#            read:customers: read your customers
#    api_key:
#      type: apiKey
#      name: api_key
#      in: header